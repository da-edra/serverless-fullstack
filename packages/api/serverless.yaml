service: myapp-api
provider:
  name: aws
  stackName: ${{self:service}}-${{self:provider.stage}}
  runtime: nodejs12.x
  memorySize: 128
  timeout: 6
  stage: ${{opt:stage, self:custom.defaultStage}}
  profile: ${{self:custom.stages.${{self:provider.stage}}.profile}}
  region: us-east-1
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._@\\'\",\\-\\/\\(\\)]+?)}}"
  logs:
    restApi:
      format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      level: INFO # INFO, ERROR
  environment:
    IS_OFFLINE: ${{env:IS_OFFLINE}}
    USER_TABLE: ${{file(../db/stack-outputs.yaml):DynamoDbUserTableName}}

plugins:
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-apigateway-service-proxy
  - serverless-offline

custom:
  defaultStage: dev
  stages:
    dev:
      profile: myapp_dev
      domainEnabled: false
    staging:
      profile: myapp_staging
      domainName: staging.api.example.com
      validationDomain: halfstack.software
      domainEnabled: true
    prod:
      profile: myapp_prod
      domainName: api.example.com
      validationDomain: halfstack.software
      domainEnabled: true
  customDomain:
    domainName: ${{self:custom.stages.${{self:provider.stage}}.domainName}}
    certificateName: ${{self:custom.stages.${{self:provider.stage}}.domainName}}
    enabled: ${{self:custom.stages.${{self:provider.stage}}.domainEnabled}}
    # createRoute53Record: false
  serverless-offline:
    httpPort: 4911
    noPrependStageInUrl: true
    useChildProcesses: true # hack to get watching working
    useSeparateProcesses: true

functions:
  express:
    handler: functions/express/lambda.handler
    events:
        - http: ANY /
          cors: true
        - http: 'ANY {proxy+}'
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: "Allow"
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:UpdateItem
        Resource:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/User

resources:
  Conditions:
    UseDomainName:
      !Equals
        - ${{self:custom.customDomain.enabled}}
        - true
  
  Resources:
    AcmCertificate:
      Type: AWS::CertificateManager::Certificate
      Condition: UseDomainName
      Properties:
        DomainName: ${{self:custom.customDomain.domainName}}
        DomainValidationOptions:
          - DomainName: ${{self:custom.customDomain.domainName}}
            ValidationDomain: ${{self:custom.stages.${{self:provider.stage}}.validationDomain}}
